/// <reference types="node" />
import { ProcessorOptions } from '../start';
import { IProcessorSource } from '../ingest';
import { HandlerLookupService } from './HandlerLookupService';
import { SubstrateEvent } from '@dzlzv/hydra-common';
import { ProcessorStateHandler } from '../state';
import { EventEmitter } from 'events';
export declare class MappingsProcessor extends EventEmitter {
    protected options: ProcessorOptions;
    protected eventsSource: IProcessorSource;
    protected handlerLookup: HandlerLookupService;
    protected stateHandler: ProcessorStateHandler;
    private state;
    private _started;
    private currentFilter;
    private indexerHead;
    private _name;
    constructor(options: ProcessorOptions, eventsSource?: IProcessorSource, handlerLookup?: HandlerLookupService, stateHandler?: ProcessorStateHandler);
    start(): Promise<void>;
    stop(): void;
    private nextFilter;
    processingLoop(): Promise<void>;
    processEventBlock(queryEventBlock: SubstrateEvent[]): Promise<void>;
    get name(): string;
}
