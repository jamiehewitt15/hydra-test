import { BackoffStrategy } from './BackOffStrategy';
export declare const POLL_INTERVAL_MS = 100;
export declare const DEFAULT_FETCH_TIMEOUT_MS = 500;
/**
 * Resolves when an async call resolves to true, and rejects if any call rejects.
 *
 *
 * @param condition Async condition to be satisfied
 * @param exit Force exit handle
 * @param pollInterval
 */
export declare function waitForAsync(condition: () => Promise<boolean>, exit?: () => boolean, pollInterval?: number): Promise<void>;
/**
 * Returns a promise which resolves when a certain condition is met
 *
 * @param condition The promise resolves when `condition()` returns true
 * @param exit (optional) The promise rejects if exit() returns true
 * @param pollInterval (optimal) The sleep interval
 */
export declare function waitFor(condition: () => boolean, exit?: () => boolean, pollInterval?: number): Promise<void>;
/**
 * Sleep for a given amount of milliseconds
 *
 * @param time For how long to sleep
 */
export declare function sleep(timeMS: number): Promise<void>;
export declare function withTimeout<T>(promiseFn: Promise<T>, rejectMsg?: string, timeoutMS?: number): Promise<T>;
/**
 * Tries to resolve the given promise multiple times; gives up after the given number of retries.
 * If the number of retries is `-1` (default), then it retries ad infinitum.
 *
 * @param promiseFn Promise to resolve
 * @param retries Number of retries or -1 for infinite number of retries;
 */
export declare function retry<T>(promiseFn: () => Promise<T>, retries?: number, backoff?: BackoffStrategy): Promise<T>;
export declare function retryWithTimeout<T>(promiseFn: () => Promise<T>, timeout: number, retries?: number, backoff?: BackoffStrategy): Promise<T>;
