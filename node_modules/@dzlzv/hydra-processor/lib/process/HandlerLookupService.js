"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HandlerLookupService = void 0;
const tslib_1 = require("tslib");
const typedi_1 = require("typedi");
const debug_1 = require("debug");
// Get the even name from the mapper name. By default, we assume the handlers
// are of the form <section>_<method> which is translated into the canonical event name of the
// form <section>.<method>
const DEFAULT_MAPPINGS_TRANSLATOR = (m) => `${m.split('_')[0]}.${m.split('_')[1]}`;
const debug = debug_1.default('index-builder:processor');
let HandlerLookupService = class HandlerLookupService {
    constructor(options) {
        this.options = options;
        this._events = [];
        this._event2mapping = {};
        this._translator = DEFAULT_MAPPINGS_TRANSLATOR;
        this._processingPack = this.options.processingPack;
        this._translator =
            this.options.mappingToEventTranslator || DEFAULT_MAPPINGS_TRANSLATOR;
        this._events = Object.keys(this._processingPack).map((mapping) => this._translator(mapping));
        Object.keys(this._processingPack).map((m) => {
            this._event2mapping[this._translator(m)] = this._processingPack[m];
        });
        debug(`The following events will be processed: ${JSON.stringify(this._events, null, 2)}`);
    }
    eventsToHandle() {
        return this._events;
    }
    lookupHandler(eventName) {
        return this._event2mapping[eventName];
    }
};
HandlerLookupService = tslib_1.__decorate([
    typedi_1.Service(),
    tslib_1.__param(0, typedi_1.Inject('ProcessorOptions')),
    tslib_1.__metadata("design:paramtypes", [Object])
], HandlerLookupService);
exports.HandlerLookupService = HandlerLookupService;
//# sourceMappingURL=HandlerLookupService.js.map