"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const model_1 = require("./model");
const chai_1 = require("chai");
const VariantsRenderer_1 = require("../../src/generate/VariantsRenderer");
const fs = tslib_1.__importStar(require("fs-extra"));
describe('VariantsRenderer', () => {
    let variantsTemplate;
    before(() => {
        // set timestamp in the context to make the output predictable
        variantsTemplate = fs.readFileSync('./src/templates/variants/variants.mst', 'utf-8');
    });
    it('Should render union types', () => {
        const model = model_1.fromStringSchema(`
    union Poor = HappyPoor | Miserable
    type HappyPoor @variant {
      father: Poor!
      mother: Poor!
    }
    
    type Miserable @variant {
      hates: String!
    }
    
    type MyEntity @entity {
      status: Poor!
    }`);
        const gen = new VariantsRenderer_1.VariantsRenderer(model);
        const rendered = gen.render(variantsTemplate);
        chai_1.expect(rendered).include('export const Poor = createUnionType', 'Should create a union type');
        chai_1.expect(rendered).include('types: () => [HappyPoor, Miserable]', 'Should join types');
        chai_1.expect(rendered).include('mother!: typeof Poor', 'Should define field');
    });
    it('Should import enums', () => {
        const model = model_1.fromStringSchema(`
    enum GeN_ERa_TION {
      BOOMER, ZOOMER, GENEXER
    }
    
    union Status = MiddleClass | Rich 
    
    type Rich @variant {
      bank: String!
    }
    
    type MiddleClass @variant {
      generation: GeN_ERa_TION
    }`);
        const gen = new VariantsRenderer_1.VariantsRenderer(model);
        const rendered = gen.render(variantsTemplate);
        chai_1.expect(rendered).include(`import { GeN_ERa_TION } from '../enums/enums'`, 'Should import enums');
    });
});
