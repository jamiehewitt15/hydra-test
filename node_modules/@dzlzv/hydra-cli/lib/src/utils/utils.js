"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.readModuleFile = exports.resolvePackageVersion = exports.copyTemplateToCWD = exports.getTemplatePath = exports.copyFiles = exports.createFile = exports.createDir = void 0;
const tslib_1 = require("tslib");
const fs = tslib_1.__importStar(require("fs-extra"));
const path = tslib_1.__importStar(require("path"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const debug = debug_1.default('hydra-cli:utils');
function createDir(path, del = false, recursive = false) {
    if (!fs.existsSync(path)) {
        fs.mkdirSync(path, { recursive });
    }
    if (del) {
        fs.removeSync(path);
        fs.mkdirSync(path);
    }
}
exports.createDir = createDir;
function createFile(path, content = '', replace = false) {
    if (!fs.existsSync(path) || replace) {
        fs.writeFileSync(path, content);
    }
}
exports.createFile = createFile;
async function copyFiles(from, to) {
    try {
        await fs.copy(from, to);
    }
    catch (err) {
        console.error(err);
    }
}
exports.copyFiles = copyFiles;
function getTemplatePath(template) {
    const templatePath = path.resolve(__dirname, '..', 'templates', ...template.split('/'));
    if (!fs.existsSync(templatePath)) {
        throw new Error(`Tempate ${template} does not exists!`);
    }
    return templatePath;
}
exports.getTemplatePath = getTemplatePath;
/**
 * Copies the template to the current directory of the process under the <filename>
 *
 * @param template Template file int templates/<templateName>
 * @param fileName Filename of the file to be created
 */
async function copyTemplateToCWD(templateName, fileName) {
    await fs.copyFile(getTemplatePath(templateName), path.join(process.cwd(), fileName));
}
exports.copyTemplateToCWD = copyTemplateToCWD;
/**
 * resolve a package version by resolving package.json
 *
 * @param pkgName dependency to loockup
 */
function resolvePackageVersion(pkgName) {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const path = require.resolve('@dzlzv/hydra-cli/package.json');
    const pkgJson = JSON.parse(fs.readFileSync(path, 'utf-8'));
    debug(`Resolved hydra-cli package.json: ${JSON.stringify(pkgJson, null, 2)}`);
    if (pkgName === '@dzlzv/hydra-cli') {
        return pkgJson.version;
    }
    if (pkgJson.hydraDependencies) {
        const deps = pkgJson.hydraDependencies;
        if (deps[pkgName])
            return deps[pkgName];
    }
    throw new Error(`Can't resolve ${pkgName} version`);
}
exports.resolvePackageVersion = resolvePackageVersion;
/**
 * Tries to resolve a filepath from node_modules and reads the file as a string
 *
 * @param path a path like 'someModule/<path-to-file>
 */
function readModuleFile(path) {
    const resolved = require.resolve(path);
    return fs.readFileSync(resolved, 'utf-8');
}
exports.readModuleFile = readModuleFile;
