"use strict";
/**
 * This preamble is added to the schema in order to pass the SDL validation
 * Add additional scalar types and directives to the schema
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SCHEMA_DEFINITIONS_PREAMBLE = exports.DERIVED_FROM_DIRECTIVE = exports.VARIANT_DIRECTIVE = exports.UNIQUE_DIRECTIVE = exports.ENTITY_DIRECTIVE = void 0;
exports.ENTITY_DIRECTIVE = 'entity';
exports.UNIQUE_DIRECTIVE = 'unique';
exports.VARIANT_DIRECTIVE = 'variant';
exports.DERIVED_FROM_DIRECTIVE = `derivedFrom`;
exports.SCHEMA_DEFINITIONS_PREAMBLE = `
directive @${exports.VARIANT_DIRECTIVE} on OBJECT # varaint types
directive @${exports.ENTITY_DIRECTIVE} on OBJECT | INTERFACE  # Mark both object types and interfaces
directive @${exports.DERIVED_FROM_DIRECTIVE}(field: String!) on FIELD_DEFINITION
directive @${exports.UNIQUE_DIRECTIVE} on FIELD_DEFINITION
scalar BigInt                # Arbitrarily large integers
scalar BigDecimal            # is used to represent arbitrary precision decimals
scalar Bytes                 # Byte array, represented as a hexadecimal string
scalar ID                    # Id scalar type
scalar DateTime              # DateTime scalar
type Query {
    _dummy: String           # empty queries are not allowed
}
`;
