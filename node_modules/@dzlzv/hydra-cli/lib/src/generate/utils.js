"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResolverReturnType = exports.generateEntityImport = exports.generateJoinTableName = exports.generateJoinColumnName = exports.ownFields = exports.hasInterfaces = exports.withNames = exports.names = exports.camelPlural = exports.pascalCase = exports.supplant = exports.camelCase = exports.kebabCase = exports.upperFirst = void 0;
const tslib_1 = require("tslib");
const lodash_1 = tslib_1.__importStar(require("lodash"));
Object.defineProperty(exports, "upperFirst", { enumerable: true, get: function () { return lodash_1.upperFirst; } });
Object.defineProperty(exports, "kebabCase", { enumerable: true, get: function () { return lodash_1.kebabCase; } });
Object.defineProperty(exports, "camelCase", { enumerable: true, get: function () { return lodash_1.camelCase; } });
const pluralize_1 = tslib_1.__importDefault(require("pluralize"));
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
function supplant(str, obj) {
    return str.replace(/\${([^${}]*)}/g, (a, b) => {
        const r = obj[b];
        return typeof r === 'string' ? r : a;
    });
}
exports.supplant = supplant;
function pascalCase(str) {
    return lodash_1.upperFirst(lodash_1.camelCase(str));
}
exports.pascalCase = pascalCase;
function camelPlural(str) {
    return lodash_1.camelCase(pluralize_1.default(str));
}
exports.camelPlural = camelPlural;
function names(name) {
    return {
        className: pascalCase(name),
        camelName: lodash_1.camelCase(name),
        kebabName: lodash_1.kebabCase(name),
        relClassName: pascalCase(name),
        relCamelName: lodash_1.camelCase(name),
        // Not proper pluralization, but good enough and easy to fix in generated code
        camelNamePlural: camelPlural(name),
    };
}
exports.names = names;
function withNames(name) {
    return Object.assign({ name }, names(name));
}
exports.withNames = withNames;
function hasInterfaces(o) {
    if (o.interfaces === undefined) {
        return false;
    }
    return o.interfaces.length > 0;
}
exports.hasInterfaces = hasInterfaces;
/**
 * Return fields which are not definded in the interface
 * @param o ObjecType definition
 */
function ownFields(o) {
    if (!hasInterfaces(o) || o.interfaces === undefined) {
        return o.fields;
    }
    const intrFields = o.interfaces[0].fields || [];
    return lodash_1.default.differenceBy(o.fields, intrFields, 'name');
}
exports.ownFields = ownFields;
function generateJoinColumnName(name) {
    return lodash_1.snakeCase(name.concat('_id'));
}
exports.generateJoinColumnName = generateJoinColumnName;
function generateJoinTableName(table1, table2) {
    return lodash_1.snakeCase(table1.concat('_', table2));
}
exports.generateJoinTableName = generateJoinTableName;
function generateEntityImport(entityName) {
    const kebabName = lodash_1.kebabCase(entityName);
    return `import {${entityName}} from '../${kebabName}/${kebabName}.model'`;
}
exports.generateEntityImport = generateEntityImport;
function generateResolverReturnType(type, isList) {
    return `Promise<${type}${isList ? '[]' : ''} | null>`;
}
exports.generateResolverReturnType = generateResolverReturnType;
