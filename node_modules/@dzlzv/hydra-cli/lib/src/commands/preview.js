"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const command_1 = require("@oclif/command");
const utils_1 = require("../utils/utils");
const path = tslib_1.__importStar(require("path"));
const fs = tslib_1.__importStar(require("fs-extra"));
const codegen_1 = tslib_1.__importDefault(require("./codegen"));
const WarthogWrapper_1 = tslib_1.__importDefault(require("../codegen/WarthogWrapper"));
const dotenv = tslib_1.__importStar(require("dotenv"));
class Preview extends command_1.Command {
    async run() {
        const { flags } = this.parse(codegen_1.default);
        dotenv.config();
        const generatedFolderPath = path.resolve(process.cwd(), codegen_1.default.generatedFolderName);
        const isGeneratedFolderPathExists = fs.existsSync(generatedFolderPath);
        utils_1.createDir(generatedFolderPath);
        // Change directory to generated
        process.chdir(generatedFolderPath);
        await this.generateAPIPreview(Object.assign(Object.assign({}, flags), { generatedFolderPath,
            isGeneratedFolderPathExists }));
    }
    async generateAPIPreview({ schema, generatedFolderPath, isGeneratedFolderPathExists, }) {
        const warthogProjectPath = path.resolve(process.cwd(), 'api-preview');
        utils_1.createDir(warthogProjectPath);
        process.chdir(warthogProjectPath);
        await new WarthogWrapper_1.default({ schema, install: true }, false).run();
        fs.copyFileSync(path.resolve(warthogProjectPath, codegen_1.default.generatedFolderName, 'schema.graphql'), path.resolve('../../apipreview.graphql'));
        // if 'generated' folder was already there dont delete it otherwise delete
        if (!isGeneratedFolderPathExists) {
            this.log('Removing unused files...');
            fs.removeSync(generatedFolderPath);
            this.log('Generated API Preview file -> apipreview.graphql');
        }
    }
}
exports.default = Preview;
Preview.description = 'Preview GraphQL API schema';
Preview.flags = {
    schema: command_1.flags.string({
        char: 's',
        description: 'Schema path',
        default: '../../schema.graphql',
    }),
};
