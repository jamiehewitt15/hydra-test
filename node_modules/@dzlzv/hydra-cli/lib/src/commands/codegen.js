"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const path = tslib_1.__importStar(require("path"));
const dotenv = tslib_1.__importStar(require("dotenv"));
const command_1 = require("@oclif/command");
const cli_ux_1 = tslib_1.__importDefault(require("cli-ux"));
const debug_1 = tslib_1.__importDefault(require("debug"));
const utils_1 = require("../utils/utils");
const processor_1 = require("../codegen/processor");
const graphql_server_1 = tslib_1.__importDefault(require("../codegen/graphql-server"));
const debug = debug_1.default('qnode-cli:codegen');
class Codegen extends command_1.Command {
    async run() {
        dotenv.config();
        const { flags } = this.parse(Codegen);
        flags.install =
            flags.install && process.env.HYDRA_NO_DEPS_INSTALL !== 'true';
        debug(`Parsed flags: ${JSON.stringify(flags, null, 2)}`);
        const generatedFolderPath = path.resolve(process.cwd(), Codegen.generatedFolderName);
        utils_1.createDir(generatedFolderPath);
        // Change directory to generated
        process.chdir(generatedFolderPath);
        // Create warthog graphql server
        if (flags.graphql) {
            cli_ux_1.default.action.start('Generating the GraphQL server');
            await graphql_server_1.default(flags);
            cli_ux_1.default.action.stop();
        }
        // Create Hydra processor
        if (flags.processor) {
            cli_ux_1.default.action.start('Generating Hydra Processor');
            await processor_1.createProcessor(flags);
            cli_ux_1.default.action.stop();
        }
    }
}
exports.default = Codegen;
Codegen.description = 'Code generator';
Codegen.generatedFolderName = 'generated';
Codegen.flags = {
    schema: command_1.flags.string({
        char: 's',
        description: 'Schema path',
        default: '../../schema.graphql',
    }),
    // pass --no-indexer to skip indexer generation
    processor: command_1.flags.boolean({
        char: 'i',
        allowNo: true,
        description: 'Generate Hydra Processor',
        default: true,
    }),
    // pass --no-graphql to skip graphql generation
    graphql: command_1.flags.boolean({
        char: 'g',
        allowNo: true,
        description: 'Generate GraphQL server',
        default: true,
    }),
    createDb: command_1.flags.boolean({
        char: 'd',
        description: 'Create the DB and install migrations',
        default: false,
    }),
    // pass --no-install to skip the `yarn install` steps
    install: command_1.flags.boolean({
        allowNo: true,
        description: 'Install dependencies',
        default: true,
    }),
};
