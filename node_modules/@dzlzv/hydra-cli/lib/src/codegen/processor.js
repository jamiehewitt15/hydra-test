"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createProcessor = void 0;
const tslib_1 = require("tslib");
const execa_1 = tslib_1.__importDefault(require("execa"));
const listr_1 = tslib_1.__importDefault(require("listr"));
const path = tslib_1.__importStar(require("path"));
const lodash_1 = require("lodash");
const mustache_1 = tslib_1.__importDefault(require("mustache"));
const formatter_1 = require("../helpers/formatter");
const utils_1 = require("../utils/utils");
const torm_config_1 = require("./torm-config");
async function createProcessor({ install, createDb, }) {
    // Take process where back at the end of the function execution
    const goBackDir = process.cwd();
    // Block indexer folder path
    const indexerPath = path.resolve(goBackDir, 'hydra-processor');
    utils_1.createDir(indexerPath);
    process.chdir(indexerPath);
    const generateFiles = {
        title: 'Generate source files',
        task: async () => {
            let indexFileContent = utils_1.readModuleFile('@dzlzv/hydra-processor/templates/run.ts.mst');
            indexFileContent = mustache_1.default.render(indexFileContent, {
                projectName: lodash_1.upperFirst(process.env.PROJECT_NAME),
            });
            utils_1.createFile(path.resolve('index.ts'), formatter_1.formatWithPrettier(indexFileContent));
            let pkgJsonContent = utils_1.readModuleFile('@dzlzv/hydra-processor/templates/package.json');
            pkgJsonContent = mustache_1.default.render(pkgJsonContent, {
                hydraCommon: utils_1.resolvePackageVersion('@dzlzv/hydra-common'),
                hydraDbUtils: utils_1.resolvePackageVersion('@dzlzv/hydra-db-utils'),
                hydraProcessor: utils_1.resolvePackageVersion('@dzlzv/hydra-processor'),
                pkgName: lodash_1.kebabCase(process.env.PROJECT_NAME),
                projectName: lodash_1.upperFirst(process.env.PROJECT_NAME),
            });
            utils_1.createFile(path.resolve('package.json'), formatter_1.formatWithPrettier(pkgJsonContent, { parser: 'json' }));
            // Create .env file for typeorm database connection
            utils_1.createFile(path.resolve('.env'), torm_config_1.getTypeormConfig());
            // Create
            utils_1.createFile(path.resolve('tsconfig.json'), utils_1.readModuleFile('@dzlzv/hydra-processor/templates/tsconfig.json'));
        },
    };
    // Create index.ts file
    const installDeps = {
        title: 'Install dependencies for Hydra Processor',
        skip: () => {
            if (install !== true) {
                return 'Skipping: either --no-install flag has been passed or the HYDRA_NO_DEPS_INSTALL environment variable is set to';
            }
        },
        task: async () => {
            await execa_1.default('yarn', ['install']);
        },
    };
    const migrate = {
        title: 'Create processor DB tables',
        skip: () => {
            if (install !== true || createDb !== true) {
                return `Skipping. Run the processor migrations manually with yarn db:processor:migrate`;
            }
        },
        task: async () => {
            await execa_1.default('yarn', ['db:migrate']);
        },
    };
    const listr = new listr_1.default([generateFiles, installDeps, migrate]);
    await listr.run();
    process.chdir(goBackDir);
}
exports.createProcessor = createProcessor;
