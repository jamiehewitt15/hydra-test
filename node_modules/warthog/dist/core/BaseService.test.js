"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// TODO:
//   - test totalCount
//
// Good test example: https://github.com/typeorm/typeorm/blob/master/test/functional/query-builder/brackets/query-builder-brackets.ts
require("reflect-metadata");
var typeorm_1 = require("typeorm");
var typedi_1 = require("typedi");
var torm_1 = require("../torm");
var MyBase_model_1 = require("./tests/entity/MyBase.model");
describe('BaseService', function () {
    var connection;
    var service;
    beforeAll(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, torm_1.createDBConnection({
                        entities: [__dirname + '/tests/entity/*{.js,.ts}']
                        // logging: 'all'
                    })];
                case 1:
                    connection = _a.sent();
                    service = typedi_1.Container.get('MyBaseService');
                    return [2 /*return*/];
            }
        });
    }); });
    beforeEach(function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.synchronize(true)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    afterAll(function () { return connection.close(); });
    test('buildFindQuery', function () { return __awaiter(void 0, void 0, void 0, function () {
        var results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, service.createMany([
                        { firstName: 'AA', lastName: '01' },
                        { firstName: 'BB', lastName: '02' },
                        { firstName: 'CC', lastName: '03' },
                        { firstName: 'DD', lastName: '04' },
                        { firstName: 'EE', lastName: '05' },
                        { firstName: 'FF', lastName: '06' },
                        { firstName: 'GG', lastName: '07' },
                        { firstName: 'HH', lastName: '08' },
                        { firstName: 'II', lastName: '09' },
                        { firstName: 'JJ', lastName: '10' },
                        { firstName: 'KK', lastName: '11' },
                        { firstName: 'LL', lastName: '12' },
                        { firstName: 'MM', lastName: '13' },
                        { firstName: 'NN', lastName: '14' }
                    ], '1')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, service
                            .buildFindQuery({
                            OR: [
                                { firstName_contains: 'A' },
                                { firstName_contains: 'B' },
                                { firstName_contains: 'C' },
                                { firstName_contains: 'D' },
                                { firstName_contains: 'J' },
                                { firstName_contains: 'K' }
                            ],
                            AND: [{ lastName_contains: '0' }]
                        })
                            .getMany()];
                case 2:
                    results = _a.sent();
                    expect(results.length).toEqual(5);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('findConnection', function () {
        test('returns all objects with no inputs', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, service.createMany([
                            { firstName: 'AA', lastName: '01' },
                            { firstName: 'BB', lastName: '02' },
                            { firstName: 'CC', lastName: '03' }
                        ], '1')];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, service.findConnection()];
                    case 2:
                        results = _b.sent();
                        expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.length).toEqual(3);
                        return [2 /*return*/];
                }
            });
        }); });
        test('returns a limited number of items if asked', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, service.createMany([
                            { firstName: 'AA', lastName: '01' },
                            { firstName: 'BB', lastName: '02' },
                            { firstName: 'CC', lastName: '03' }
                        ], '1')];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { first: 2 }, { edges: { node: { firstName: true } } })];
                    case 2:
                        results = _b.sent();
                        expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['AA', 'BB']);
                        return [2 /*return*/];
                }
            });
        }); });
        test('returns a limited number of items (using last)', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, service.createMany([
                            { firstName: 'AA', lastName: '01' },
                            { firstName: 'BB', lastName: '02' },
                            { firstName: 'CC', lastName: '03' }
                        ], '1')];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { last: 2 }, { edges: { node: { firstName: true } } })];
                    case 2:
                        results = _b.sent();
                        expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['CC', 'BB']);
                        return [2 /*return*/];
                }
            });
        }); });
        test('query with first, grab cursor and refetch', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, cursor;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, service.createMany([
                            { firstName: 'AA', lastName: '01' },
                            { firstName: 'BB', lastName: '02' },
                            { firstName: 'CC', lastName: '03' },
                            { firstName: 'DD', lastName: '04' },
                            { firstName: 'EE', lastName: '05' },
                            { firstName: 'FF', lastName: '06' },
                            { firstName: 'GG', lastName: '07' }
                        ], '1')];
                    case 1:
                        _d.sent();
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { first: 3 }, {
                                edges: { node: { firstName: true } },
                                pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                            })];
                    case 2:
                        results = _d.sent();
                        expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['AA', 'BB', 'CC']);
                        cursor = (_b = results.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor;
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { first: 3, after: cursor }, {
                                edges: { node: { firstName: true } },
                                pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                            })];
                    case 3:
                        results = _d.sent();
                        expect((_c = results.edges) === null || _c === void 0 ? void 0 : _c.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['DD', 'EE', 'FF']);
                        return [2 /*return*/];
                }
            });
        }); });
        test('query with last, grab cursor and refetch', function () { return __awaiter(void 0, void 0, void 0, function () {
            var results, cursor;
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, service.createMany([
                            { firstName: 'AA', lastName: '01' },
                            { firstName: 'BB', lastName: '02' },
                            { firstName: 'CC', lastName: '03' },
                            { firstName: 'DD', lastName: '04' },
                            { firstName: 'EE', lastName: '05' },
                            { firstName: 'FF', lastName: '06' },
                            { firstName: 'GG', lastName: '07' }
                        ], '1')];
                    case 1:
                        _d.sent();
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { last: 3 }, {
                                edges: { node: { firstName: true } },
                                pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                            })];
                    case 2:
                        results = _d.sent();
                        expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['GG', 'FF', 'EE']);
                        cursor = (_b = results.pageInfo) === null || _b === void 0 ? void 0 : _b.endCursor;
                        return [4 /*yield*/, service.findConnection(undefined, 'firstName_ASC', { last: 3, before: cursor }, {
                                edges: { node: { firstName: true } },
                                pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                            })];
                    case 3:
                        results = _d.sent();
                        expect((_c = results.edges) === null || _c === void 0 ? void 0 : _c.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['DD', 'CC', 'BB']);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    test('multiple sorts, query with first, grab cursor and refetch', function () { return __awaiter(void 0, void 0, void 0, function () {
        var results, cursor;
        var _a, _b, _c, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, service.createMany([
                        { registered: true, firstName: 'AA', lastName: '01' },
                        { registered: false, firstName: 'BB', lastName: '02' },
                        { registered: true, firstName: 'CC', lastName: '03' },
                        { registered: false, firstName: 'DD', lastName: '04' },
                        { registered: true, firstName: 'EE', lastName: '05' },
                        { registered: false, firstName: 'FF', lastName: '06' },
                        { registered: true, firstName: 'GG', lastName: '07' }
                    ], '1')];
                case 1:
                    _e.sent();
                    return [4 /*yield*/, service.findConnection(undefined, ['registered_ASC', 'firstName_ASC'], { first: 4 }, {
                            edges: { node: { firstName: true, registered: true } },
                            pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                        })];
                case 2:
                    results = _e.sent();
                    expect((_a = results.edges) === null || _a === void 0 ? void 0 : _a.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['BB', 'DD', 'FF', 'AA']);
                    expect((_b = results.pageInfo) === null || _b === void 0 ? void 0 : _b.hasNextPage).toEqual(true);
                    cursor = (_c = results.pageInfo) === null || _c === void 0 ? void 0 : _c.endCursor;
                    return [4 /*yield*/, service.findConnection(undefined, ['registered_ASC', 'firstName_ASC'], { first: 3, after: cursor }, {
                            edges: { node: { firstName: true } },
                            pageInfo: { endCursor: {}, hasNextPage: {}, hasPreviousPage: {} }
                        })];
                case 3:
                    results = _e.sent();
                    expect((_d = results.edges) === null || _d === void 0 ? void 0 : _d.map(function (edge) { var _a; return (_a = edge.node) === null || _a === void 0 ? void 0 : _a.firstName; })).toEqual(['CC', 'EE', 'GG']);
                    return [2 /*return*/];
            }
        });
    }); });
    test.skip('fun with brackets', function () { return __awaiter(void 0, void 0, void 0, function () {
        var bases;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, service.createMany([
                        { firstName: 'Timber', lastName: 'Saw' },
                        { firstName: 'Pleerock', lastName: 'Pleerock' },
                        { firstName: 'Alex', lastName: 'Messer' }
                    ], '1')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, connection
                            .createQueryBuilder(MyBase_model_1.MyBase, 'user')
                            .where('user.lastName = :lastName0', { lastName0: 'Pleerock' })
                            .orWhere(new typeorm_1.Brackets(function (qb) {
                            qb.where('user.firstName = :firstName1', {
                                firstName1: 'Timber'
                            }).andWhere('user.lastName = :lastName1', { lastName1: 'Saw' });
                        }))
                            .orWhere(new typeorm_1.Brackets(function (qb) {
                            qb.where('user.firstName = :firstName2', {
                                firstName2: 'Alex'
                            }).andWhere('user.lastName = :lastName2', { lastName2: 'Messer' });
                        }))
                            .getMany()];
                case 2:
                    bases = _a.sent();
                    expect(bases.length).toEqual(3);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=BaseService.test.js.map