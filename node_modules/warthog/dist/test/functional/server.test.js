"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
/* eslint-disable @typescript-eslint/camelcase */
var __1 = require("../../");
var http_1 = require("../../core/http");
var modules_1 = require("../modules");
var test_server_1 = require("../test-server");
var fixtures_1 = require("./fixtures");
var utils_1 = require("../utils");
var express = require("express");
var request = require("supertest");
var encoding_1 = require("../../core/encoding");
var runKey;
var server;
// Can't type this as Binding as TypeScript will do static analysis and bomb if any new fields are introduced
var binding;
var customExpressApp;
var onBeforeCalled = false;
var onAfterCalled = false;
var kitchenSink;
describe('server', function () {
    // Make sure to clean up server
    beforeAll(function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var error_1, sinksExist;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // setTestServerEnvironmentVariables();
                    runKey = String(new Date().getTime()); // used to ensure test runs create unique data
                    // build a custom express app with a dummy endpoint
                    customExpressApp = buildCustomExpressApp();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    // TODO: before you attempt to start the server, we need to generate the code so that we don't get TS compiler issues
                    server = test_server_1.getTestServer({
                        apolloConfig: { playground: false },
                        expressApp: customExpressApp,
                        onBeforeGraphQLMiddleware: function (app) {
                            app;
                            onBeforeCalled = true;
                        },
                        onAfterGraphQLMiddleware: function (app) {
                            app;
                            onAfterCalled = true;
                        }
                    });
                    return [4 /*yield*/, server.start()];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, server.getBinding()];
                case 3:
                    binding = (_a.sent());
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _a.sent();
                    __1.logger.error(error_1);
                    throw new Error(error_1);
                case 5: return [4 /*yield*/, binding.query.kitchenSinks({ limit: 1 }, '{ id }')];
                case 6:
                    sinksExist = (_a.sent()).length > 0;
                    if (!!sinksExist) return [3 /*break*/, 10];
                    return [4 /*yield*/, createKitchenSink(binding, 'hi@warthog.com')];
                case 7:
                    kitchenSink = _a.sent();
                    return [4 /*yield*/, createManyDishes(binding, kitchenSink.id)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, createManyKitchenSinks(binding)];
                case 9:
                    _a.sent();
                    _a.label = 10;
                case 10:
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    // Make sure to clean up server
    afterAll(function (done) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, server.stop()];
                case 1:
                    _a.sent();
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    test('before and after middleware hooks called', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect(onBeforeCalled).toEqual(true);
            expect(onAfterCalled).toEqual(true);
            return [2 /*return*/];
        });
    }); });
    test('disables playground properly using apollo config options', function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, http_1.get(server.getGraphQLServerUrl())];
                case 1:
                    response = _a.sent();
                    expect(response.statusCode).toEqual(400);
                    expect(response.body).toContain('GET query missing');
                    return [2 /*return*/];
            }
        });
    }); });
    // Previously, dataloader bombed out if you didn't ask for id, because postgres didn't
    // return it and we couldn't batch IDs to query lower
    test('queries deeply nested objects without an ID', function () { return __awaiter(void 0, void 0, void 0, function () {
        var results, firstResult;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ offset: 0, orderBy: 'createdAt_ASC', limit: 1 }, "{\n          dateField\n          jsonField\n          stringField\n          emailField\n          integerField\n          booleanField\n          floatField\n          dishes {\n            name\n            kitchenSink {\n              stringField\n            }\n          }\n          createdById\n          updatedById\n          version\n        }")];
                case 1:
                    results = _a.sent();
                    expect(results).toMatchSnapshot();
                    firstResult = results[0];
                    expect(firstResult.dishes.length).toEqual(20);
                    return [2 /*return*/];
            }
        });
    }); });
    test('queries for dishes with pagination', function () { return __awaiter(void 0, void 0, void 0, function () {
        var _a, totalCount, edges, pageInfo, encodingService, decodedCursor;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, utils_1.callAPISuccess(binding.query.dishConnection({ orderBy: 'name_ASC', first: 1 }, "{\n            totalCount\n            edges {\n              node {\n                name\n                kitchenSink {\n                  emailField\n                }\n              }\n              cursor\n            }\n            pageInfo {\n              hasNextPage\n              hasPreviousPage\n              startCursor\n              endCursor\n            }\n          }"))];
                case 1:
                    _a = _b.sent(), totalCount = _a.totalCount, edges = _a.edges, pageInfo = _a.pageInfo;
                    encodingService = new encoding_1.EncodingService();
                    decodedCursor = encodingService.decode(edges[0].cursor);
                    expect(decodedCursor[0]).toMatch(/Dish [0-9]+/);
                    expect(decodedCursor[1]).toMatch(/[A-Za-z0-9_-]{7,14}/);
                    expect(edges[0].node.name).toBeTruthy();
                    expect(edges[0].node.kitchenSink.emailField).toBeTruthy();
                    expect(pageInfo.hasNextPage).toEqual(true);
                    expect(pageInfo.hasPreviousPage).toEqual(false);
                    expect(totalCount).toEqual(20);
                    return [2 /*return*/];
            }
        });
    }); });
    test.skip('Does not perform expensive totalCount operation if not needed', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/];
        });
    }); });
    test('throws errors when given bad input on a single create', function (done) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            expect.assertions(1);
            createKitchenSink(binding, '').catch(function (error) {
                expect(error).toHaveProperty('message', 'Argument Validation Error\n');
                done();
            });
            return [2 /*return*/];
        });
    }); });
    test('throws errors when given bad input on a many create', function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var sink;
        return __generator(this, function (_a) {
            expect.assertions(1);
            sink = {
                dateField: '2000-03-26T19:39:08.597Z',
                stringField: 'Trantow',
                emailField: '',
                integerField: 41,
                booleanField: false,
                floatField: -1.3885,
                stringEnumField: modules_1.StringEnum.BAR
            };
            createManyKitchenSinks(binding, [sink]).catch(function (error) {
                expect(error).toHaveProperty('message', 'Argument Validation Error\n');
                done();
            });
            return [2 /*return*/];
        });
    }); });
    test('getBindingError pulls correct info from binding error', function (done) { return __awaiter(void 0, void 0, void 0, function () {
        var originalError, improvedError, err_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(4);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, createKitchenSink(binding, 'not.an.email')];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    originalError = err_1;
                    improvedError = __1.getBindingError(err_1);
                    return [3 /*break*/, 4];
                case 4:
                    // Ensure that the raw error is useless. If this ever breaks and gives back a lot of
                    // useful info, we can get rid of getBindingError and just use the vanilla error
                    expect(Object.keys(originalError)).toEqual(['message', 'locations', 'path']);
                    // Note: this should likely not be an INTERNAL_SERVER_ERROR since it's based on bad user input
                    expect(improvedError.message).toEqual('Argument Validation Error');
                    // TODO: this should likely be cleaned up
                    expect(improvedError.validationErrors.emailField.isEmail).toEqual('emailField must be an email');
                    expect(improvedError.validationErrors).toMatchSnapshot();
                    done();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: allows client to ask for __typename', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ limit: 1 }, '{ __typename }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(1);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: exact match (Nakia)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_eq: 'Nakia' } }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(1);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: contains `a` (upper or lower)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_contains: 'a' }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(58);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: contains `A` (upper or lower)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_contains: 'A' }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(58);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: starts with `b` (upper or lower)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_startsWith: 'B' } }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(5);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: ends with `z` (upper or lower)', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_endsWith: 'Z' } }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(3);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: string query: in list { devin, erling, KAELYN, raquel }', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringField_in: ['devin', 'erling', 'KAELYN', 'raquel'] } }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(4);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: integer query: less than 21', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { integerField_lt: 21 }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(65);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: integer query: less than or equal to 21', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { integerField_lte: 21 }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(66);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: integer query: greater than 21', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { integerField_gt: 21 }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(35);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: integer query: greater than or equal to 21', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { integerField_gte: 21 }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(36);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: enum field = BAR', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(2);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { stringEnumField_eq: modules_1.StringEnum.BAR }, limit: 100 }, '{ stringField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(56);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: dateOnlyField greater than or equal 2020-01-01', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(3);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { dateOnlyField_gte: '2020-01-01' }, limit: 100 }, '{ stringField dateOnlyField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(30);
                    expect(result[0].dateOnlyField.length).toBe(10);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: dateTimeField less than or equal 2020-01-01', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { dateTimeField_lte: '2020-01-01' }, limit: 100 }, '{ stringField dateTimeField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(69);
                    expect(result[0].dateTimeField.length).toBe(24);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: jsonField foo_eq: bar', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { jsonField_json: { foo_eq: 'bar' } }, limit: 100 }, '{ stringField jsonField }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(29);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfInts_containsAll: [1, 2, 7]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfInts_containsAll: [1, 2, 7] }, limit: 100 }, '{ stringField arrayOfInts }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(1);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfInts_containsAny: [1, 2, 7]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfInts_containsAny: [1, 2, 7] }, limit: 100 }, '{ stringField arrayOfInts }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(46);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfInts_containsNone: [1, 2, 7]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfInts_containsNone: [1, 2, 7] }, limit: 100 }, '{ stringField arrayOfInts }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(54);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfStrings_containsAll: [dog, cat]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfStrings_containsAll: ['dog', 'cat'] }, limit: 100 }, '{ stringField arrayOfStrings }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(3);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfStrings_containsAny: [dog, cat]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfStrings_containsAny: ['dog', 'cat'] }, limit: 100 }, '{ stringField arrayOfStrings }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(29);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('find: arrayOfStrings_containsNone: [dog, cat]', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, binding.query.kitchenSinks({ where: { arrayOfStrings_containsNone: ['dog', 'cat'] }, limit: 100 }, '{ stringField arrayOfStrings }')];
                case 1:
                    result = _a.sent();
                    expect(result.length).toEqual(71);
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    //
    //
    // jsonField: {
    //   foo: 'bar',
    //   quia: 'autem'
    // },
    // arrayOfInts: [1],
    // arrayOfStrings: []
    //
    //
    test('findOne: consequuntur-94489@a.com', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, binding.query.kitchenSink({ where: { emailField: 'consequuntur-94489@a.com' } }, '{ stringField }')];
                case 2:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_2 = _a.sent();
                    throw new Error(error_2);
                case 4:
                    expect(result.stringField).toEqual('Trantow');
                    return [2 /*return*/];
            }
        });
    }); });
    test('Use 2 different operators on same attribute', function () { return __awaiter(void 0, void 0, void 0, function () {
        var result, where, error_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(3);
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    where = {
                        stringField_endsWith: 'w',
                        stringField_contains: 'a'
                    };
                    return [4 /*yield*/, binding.query.kitchenSinks({ limit: 100, where: where }, '{ stringField }')];
                case 2:
                    result = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_3 = _a.sent();
                    throw new Error(error_3);
                case 4:
                    expect(result.length).toEqual(1);
                    expect(result[0].stringField).toEqual('Trantow');
                    expect(result).toMatchSnapshot();
                    return [2 /*return*/];
            }
        });
    }); });
    test('Update and Delete', function () { return __awaiter(void 0, void 0, void 0, function () {
        var email, returnFields, sink, result, error_4, error_5, id, expected, error_6, _, booleanField, floatField, integerField, expected2, error_7, error, err_2, err_3, err_4, err_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(12);
                    email = 'update@warthog.com';
                    returnFields = '{ id, stringField, emailField, integerField, booleanField, floatField }';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, createKitchenSink(binding, email, returnFields)];
                case 2:
                    sink = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_4 = _a.sent();
                    throw new Error(error_4);
                case 4:
                    expect(sink.stringField).toEqual('My String');
                    _a.label = 5;
                case 5:
                    _a.trys.push([5, 7, , 8]);
                    return [4 /*yield*/, updateKitchenSink(binding, {
                            stringField: 'Updated via Email Field!',
                            integerField: 9876,
                            booleanField: false
                        }, {
                            emailField: email
                        })];
                case 6:
                    result = _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    error_5 = _a.sent();
                    throw new Error(error_5);
                case 8:
                    id = result.id, expected = __rest(result, ["id"]);
                    expect(expected).toEqual({
                        emailField: 'update@warthog.com',
                        stringField: 'Updated via Email Field!',
                        integerField: 9876,
                        booleanField: false,
                        floatField: 123.456
                    });
                    _a.label = 9;
                case 9:
                    _a.trys.push([9, 11, , 12]);
                    return [4 /*yield*/, updateKitchenSink(binding, {
                            stringField: 'Updated via ID!',
                            integerField: 9876,
                            booleanField: false
                        }, {
                            emailField: email
                        })];
                case 10:
                    result = _a.sent();
                    return [3 /*break*/, 12];
                case 11:
                    error_6 = _a.sent();
                    throw new Error(error_6);
                case 12:
                    _ = result.id, booleanField = result.booleanField, floatField = result.floatField, integerField = result.integerField, expected2 = __rest(result, ["id", "booleanField", "floatField", "integerField"]);
                    expect(expected2).toEqual({
                        emailField: 'update@warthog.com',
                        stringField: 'Updated via ID!'
                    });
                    _a.label = 13;
                case 13:
                    _a.trys.push([13, 15, , 16]);
                    return [4 /*yield*/, binding.mutation.deleteKitchenSink({
                            where: { emailField: email }
                        })];
                case 14:
                    result = _a.sent();
                    return [3 /*break*/, 16];
                case 15:
                    error_7 = _a.sent();
                    throw new Error(error_7);
                case 16:
                    expect(result).toBeTruthy();
                    expect(result.id).toBeTruthy();
                    error = '';
                    _a.label = 17;
                case 17:
                    _a.trys.push([17, 19, , 20]);
                    return [4 /*yield*/, binding.query.kitchenSink({ where: { id: sink.id } }, '{ stringField }')];
                case 18:
                    result = _a.sent();
                    return [3 /*break*/, 20];
                case 19:
                    err_2 = _a.sent();
                    error = err_2.message;
                    return [3 /*break*/, 20];
                case 20:
                    expect(error).toContain('Unable to find KitchenSink where');
                    _a.label = 21;
                case 21:
                    _a.trys.push([21, 23, , 24]);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { id_eq: sink.id } }, '{ stringField }')];
                case 22:
                    result = _a.sent();
                    expect(result).toBeTruthy();
                    expect(result.length).toEqual(0);
                    return [3 /*break*/, 24];
                case 23:
                    err_3 = _a.sent();
                    error = err_3.message;
                    return [3 /*break*/, 24];
                case 24:
                    _a.trys.push([24, 26, , 27]);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { id_eq: sink.id, deletedAt_all: true } }, '{ stringField }')];
                case 25:
                    result = _a.sent();
                    expect(result).toBeTruthy();
                    expect(result.length).toEqual(1);
                    return [3 /*break*/, 27];
                case 26:
                    err_4 = _a.sent();
                    error = err_4.message;
                    return [3 /*break*/, 27];
                case 27:
                    _a.trys.push([27, 29, , 30]);
                    return [4 /*yield*/, binding.query.kitchenSinks({ where: { deletedAt_gt: '2000-01-01' } }, '{ stringField }')];
                case 28:
                    result = _a.sent();
                    expect(result).toBeTruthy();
                    expect(result.length).toEqual(1);
                    return [3 /*break*/, 30];
                case 29:
                    err_5 = _a.sent();
                    error = err_5.message;
                    return [3 /*break*/, 30];
                case 30: return [2 /*return*/];
            }
        });
    }); });
    test('Send request to /foo via passed in custom express app', function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(5);
                    return [4 /*yield*/, request(customExpressApp)
                            .get('/foo')
                            .send()];
                case 1:
                    response = _a.sent();
                    expect(response.status).toEqual(200);
                    expect(response.body).toEqual({ bar: 'baz' });
                    noSupertestRequestErrors(response);
                    return [2 /*return*/];
            }
        });
    }); });
    test("Send request to /foo via server's exposed express app", function () { return __awaiter(void 0, void 0, void 0, function () {
        var response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(5);
                    return [4 /*yield*/, request(server.expressApp)
                            .get('/foo')
                            .send()];
                case 1:
                    response = _a.sent();
                    expect(response.status).toEqual(200);
                    expect(response.body).toEqual({ bar: 'baz' });
                    noSupertestRequestErrors(response);
                    return [2 /*return*/];
            }
        });
    }); });
    describe('Transactions', function () {
        test('create two dishes in transaction successfully', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            var name, users, savedDishes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(5);
                        name = "Tx Success " + runKey;
                        return [4 /*yield*/, utils_1.callAPISuccess(binding.mutation.successfulTransaction({ data: { name: name, kitchenSinkId: kitchenSink.id } }, "{ id name }"))];
                    case 1:
                        users = _a.sent();
                        expect(users[0]).toBeDefined();
                        expect(users[0].name).toBe(name);
                        expect(users[1]).toBeDefined();
                        expect(users[1].name).toBe(name + " Updated");
                        return [4 /*yield*/, binding.query.dishes({ where: { name_contains: name } }, '{ id }')];
                    case 2:
                        savedDishes = _a.sent();
                        expect(savedDishes.length).toEqual(2);
                        done();
                        return [2 /*return*/];
                }
            });
        }); });
        test('failed transaction should not save any items', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            var name, result, savedDishes, error_8;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        name = "Tx Fail " + runKey;
                        return [4 /*yield*/, utils_1.callAPIError(binding.mutation.failedTransaction({ data: { name: name, kitchenSinkId: kitchenSink.id } }, "{ id name }"))];
                    case 1:
                        result = _a.sent();
                        expect(result.message).toBe('null value in column "name" violates not-null constraint');
                        savedDishes = [];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, binding.query.dishes({ where: { name_eq: name } }, '{ id }')];
                    case 3:
                        savedDishes = _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_8 = _a.sent();
                        console.error('This should not have errored', savedDishes);
                        return [3 /*break*/, 5];
                    case 5:
                        expect(savedDishes.length).toEqual(0);
                        done();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('DB Decorator options', function () {
        var kitchenSinkDBColumns;
        var stringFieldColumn;
        beforeEach(function () {
            var kitchenSinkTableMeta = server.connection.entityMetadatas.find(function (entity) { return entity.name === 'KitchenSink'; });
            if (!kitchenSinkTableMeta) {
                throw new Error('Expected to find the KitchenSink TypeORM metadata');
            }
            kitchenSinkDBColumns = kitchenSinkTableMeta.columns.map(function (column) { return column.propertyName; });
            stringFieldColumn = kitchenSinkTableMeta.columns.find(function (column) { return column.propertyName === 'stringField'; });
        });
        test('apiOnly column does not exist in the DB', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(kitchenSinkDBColumns).not.toContain('apiOnlyField');
                done();
                return [2 /*return*/];
            });
        }); });
        test('dbOnly column does exist in the DB', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(kitchenSinkDBColumns).toContain('dbOnlyField');
                done();
                return [2 /*return*/];
            });
        }); });
        // TypeORM comment support is currently broken
        // See: https://github.com/typeorm/typeorm/issues/5906
        test.skip('description maps to comment DB metadata', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(stringFieldColumn.comment).toEqual('This is a string field');
                done();
                return [2 /*return*/];
            });
        }); });
    });
    describe('ApiOnly Model', function () {
        var apiOnlyEntityMeta;
        beforeEach(function () {
            apiOnlyEntityMeta = server.connection.entityMetadatas.find(function (entity) { return entity.name === 'ApiOnly'; });
        });
        test('Does not exist in the DB', function (done) { return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_a) {
                expect(apiOnlyEntityMeta).toBeFalsy();
                done();
                return [2 /*return*/];
            });
        }); });
        test('Does exist in the API schema', function () {
            var file = path.join(__dirname, '..', 'generated', 'schema.graphql');
            var schema = fs.readFileSync(file, 'utf-8');
            expect(schema).toContain('ApiOnly');
            expect(schema).toContain('ApiOnlyWhereInput');
        });
    });
});
function createKitchenSink(binding, email, returnFields) {
    if (returnFields === void 0) { returnFields = '{ id }'; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, binding.mutation.createKitchenSink({
                    data: {
                        booleanField: true,
                        dateField: '2019-10-15',
                        emailField: email,
                        floatField: 123.456,
                        integerField: 123,
                        // TODO: for some reason this is getting added as NULL
                        jsonField: { hello: 'world' },
                        stringField: 'My String',
                        customTextFieldNoSortOrFilter: 'text field text field text field'
                    }
                }, returnFields)];
        });
    });
}
function updateKitchenSink(binding, data, where, returnFields) {
    if (returnFields === void 0) { returnFields = '{ id, stringField, emailField, integerField, booleanField, floatField }'; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, binding.mutation.updateKitchenSink({
                    data: data,
                    where: where
                }, returnFields)];
        });
    });
}
function createManyKitchenSinks(binding, data) {
    if (data === void 0) { data = fixtures_1.KITCHEN_SINKS; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, binding.mutation.createManyKitchenSinks({ data: data }, "{ id }")];
        });
    });
}
function createManyDishes(binding, kitchenSinkId) {
    return __awaiter(this, void 0, void 0, function () {
        var data, dishes, error_9;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    data = Array.from({ length: 20 }, function (v, i) { return i; }).map(function (item) {
                        return {
                            name: "Dish " + item,
                            kitchenSinkId: kitchenSinkId
                        };
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, binding.mutation.createManyDishs({ data: data }, "{ id name createdById }")];
                case 2:
                    dishes = _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_9 = _a.sent();
                    __1.logger.error(error_9);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/, dishes];
            }
        });
    });
}
function buildCustomExpressApp() {
    var app = express();
    app.get('/foo', function (req, res) {
        res.status(200).json({ bar: 'baz' });
    });
    return app;
}
function noSupertestRequestErrors(result) {
    expect(result.error).toBe(false);
    expect(result.clientError).toBe(false);
    expect(result.serverError).toBe(false);
}
//# sourceMappingURL=server.test.js.map