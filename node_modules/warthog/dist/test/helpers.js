"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.callWarthogCLI = exports.spyOnStd = exports.dropDB = exports.createDB = void 0;
// eslint-disable-next-line @typescript-eslint/ban-ts-ignore
// @ts-ignore
var pgtools = require("pgtools");
var util = require("util");
var cli_1 = require("../cli/cli");
var core_1 = require("../core");
function createDB(database) {
    return __awaiter(this, void 0, void 0, function () {
        var createDb;
        return __generator(this, function (_a) {
            createDb = util.promisify(pgtools.createdb);
            return [2 /*return*/, createDb(getPGConfig(), database)];
        });
    });
}
exports.createDB = createDB;
function dropDB(database) {
    return __awaiter(this, void 0, void 0, function () {
        var dropDB;
        return __generator(this, function (_a) {
            dropDB = util.promisify(pgtools.dropdb);
            return [2 /*return*/, dropDB(getPGConfig(), database)];
        });
    });
}
exports.dropDB = dropDB;
function spyOnStd() {
    var spy = {
        clear: undefined,
        stderr: undefined,
        stdout: undefined,
        getStdErr: undefined,
        getStdOut: undefined,
        getStdOutErr: undefined
    };
    beforeAll(function () {
        spy.stderr = jest.spyOn(process.stderr, 'write');
        spy.stdout = jest.spyOn(process.stdout, 'write');
    });
    beforeEach(function () {
        spy.stderr.mockClear();
        spy.stdout.mockClear();
    });
    afterAll(function () {
        spy.stderr.mockRestore();
        spy.stdout.mockRestore();
    });
    spy.clear = function () {
        spy.stderr.mockClear();
        spy.stdout.mockClear();
    };
    spy.getStdOut = function () {
        return spy.stdout.mock.calls.join(' ');
    };
    spy.getStdErr = function () {
        return spy.stderr.mock.calls.join(' ');
    };
    // Jest does some funny stdout, stderr redirection, so we need to check
    // if message were written to either.
    spy.getStdOutErr = function () {
        return [spy.getStdOut(), spy.getStdErr()].join(' ');
    };
    return spy;
}
exports.spyOnStd = spyOnStd;
// This function allows us to call the CLI from it's entry point, getting a good enough functional
// test, but also having these tests add to our code coverage (using `system.run` does not give credit)
function callWarthogCLI(cmd, overrideEnvVars) {
    return __awaiter(this, void 0, void 0, function () {
        var oldArgv, key, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    oldArgv = process.argv;
                    if (overrideEnvVars) {
                        for (key in overrideEnvVars) {
                            process.env[key] = overrideEnvVars[key];
                        }
                    }
                    // Gluegun requires the command come in as the 3rd+ arguments
                    // Could pass empty strings in the first 2 elements, but the node and warthog commands
                    // are what are passed in when you call from the command line
                    process.argv = __spreadArrays(['/fake/path/to/node', '/fake/path/to/warthog'], cmd.split(' '));
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, cli_1.run(process.argv)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    error_1 = _a.sent();
                    console.error('Error', error_1);
                    return [3 /*break*/, 4];
                case 4:
                    process.argv = oldArgv; // eslint-disable-line
                    return [2 /*return*/];
            }
        });
    });
}
exports.callWarthogCLI = callWarthogCLI;
function getPGConfig() {
    var config = new core_1.Config();
    return {
        host: config.get('DB_HOST'),
        user: config.get('DB_USERNAME'),
        password: config.get('DB_PASSWORD'),
        port: config.get('DB_PORT')
    };
}
//# sourceMappingURL=helpers.js.map