"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SchemaGenerator = void 0;
var prettier = require("prettier");
var typedi_1 = require("typedi");
var logger_1 = require("../core/logger");
var TypeORMConverter_1 = require("./TypeORMConverter");
var metadata_1 = require("../metadata");
var SchemaGenerator = /** @class */ (function () {
    function SchemaGenerator() {
    }
    SchemaGenerator.generate = function (
    // This will reference 'warthog in the deployed module, but we need to do a relative import in the examples library
    warthogImportPath) {
        if (warthogImportPath === void 0) { warthogImportPath = 'warthog'; }
        var metadata = metadata_1.getMetadataStorage();
        var template = "\n      // This file has been auto-generated by Warthog.  Do not update directly as it\n      // will be re-written.  If you need to change this file, update models or add\n      // new TypeGraphQL objects\n      // prettier-ignore\n      // @ts-ignore\n      import { DateResolver as Date } from 'graphql-scalars';\n      // prettier-ignore\n      // @ts-ignore\n      import { GraphQLID as ID } from 'graphql';\n      // prettier-ignore\n      // @ts-ignore\n      import { ArgsType, Field as TypeGraphQLField, Float, InputType as TypeGraphQLInputType, Int } from 'type-graphql';\n      // prettier-ignore\n      // @ts-ignore\n      import { registerEnumType, GraphQLISODateTime as DateTime } from \"type-graphql\";\n\n      import * as BN from 'bn.js';\n\n      // prettier-ignore\n      // @ts-ignore eslint-disable-next-line @typescript-eslint/no-var-requires\n      const { GraphQLJSONObject } = require('graphql-type-json');\n      // prettier-ignore\n      // @ts-ignore\n      import { BaseWhereInput, JsonObject, PaginationArgs, DateOnlyString, DateTimeString, BigInt, Bytes } from '" + warthogImportPath + "';\n\n      " + TypeORMConverter_1.generateEnumMapImports().join('') + "\n      " + TypeORMConverter_1.generateClassImports().join('') + "\n    ";
        Object.keys(metadata.getModels()).forEach(function (modelName) {
            var model = metadata.getModel(modelName);
            // If model is listed as dbOnly, don't generate any schema
            if (model.dbOnly === true) {
                return;
            }
            template += "\n        " + TypeORMConverter_1.entityToOrderByEnum(model) + "\n        " + TypeORMConverter_1.entityToWhereInput(model) + "\n        " + TypeORMConverter_1.entityToWhereUniqueInput(model) + "\n        " + TypeORMConverter_1.entityToCreateInput(model) + "\n        " + TypeORMConverter_1.entityToUpdateInput(model) + "\n        " + TypeORMConverter_1.entityToWhereArgs(model) + "\n        " + TypeORMConverter_1.entityToCreateManyArgs(model) + "\n        " + TypeORMConverter_1.entityToUpdateInputArgs(model) + "\n      ";
        });
        return this.format(template);
    };
    SchemaGenerator.format = function (code, options) {
        if (options === void 0) { options = {}; }
        try {
            // TODO: grab our prettier options (single quote, etc...)
            return prettier.format(code, __assign(__assign({}, options), { parser: 'typescript' }));
        }
        catch (e) {
            this.logger.error("There is a syntax error in generated code, unformatted code printed, error: " + JSON.stringify(e));
            return code;
        }
    };
    SchemaGenerator.logger = typedi_1.Container.has('warthog.logger')
        ? typedi_1.Container.get('warthog.logger')
        : logger_1.logger;
    return SchemaGenerator;
}());
exports.SchemaGenerator = SchemaGenerator;
//# sourceMappingURL=SchemaGenerator.js.map