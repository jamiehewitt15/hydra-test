"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomField = void 0;
var type_graphql_1 = require("type-graphql");
var typeorm_1 = require("typeorm");
var schema_1 = require("../schema");
var utils_1 = require("../utils");
var WarthogField_1 = require("./WarthogField");
function CustomField(args) {
    // const nullableOption = typeof args.nullable !== 'undefined' ? { nullable: args.nullable } : {};
    // const dbOptions = { ...nullableOption, ...(args.db || {}) };
    var _a = args.api, type = _a.type, filter = _a.filter, sort = _a.sort, typeGraphQLOptions = __rest(_a, ["type", "filter", "sort"]);
    // const warthogOptions = {
    //   nullable: args.api.nullable,
    //   type,
    //   filter,
    //   sort,
    //   isArray: args.db.array
    // };
    // // These are the 2 required decorators to get type-graphql and typeorm working
    // const factories = [
    //   WarthogField(args.api.type, warthogOptions),
    //   Field(
    //     () =>
    //       args.db.array
    //         ? [columnTypeToGraphQLType(args.api.type)]
    //         : columnTypeToGraphQLType(args.api.type),
    //     typeGraphQLOptions
    //   ),
    //   Column(args.db) as MethodDecoratorFactory
    // ]
    var warthogOptions = { nullable: args.api.nullable, type: type, filter: filter, sort: sort, array: args.db.array };
    var graphQLType = args.db.array
        ? [schema_1.columnTypeToGraphQLType(args.api.type)]
        : schema_1.columnTypeToGraphQLType(args.api.type);
    // These are the 2 required decorators to get type-graphql and typeorm working
    var factories = [
        WarthogField_1.WarthogField(args.api.type, warthogOptions),
        type_graphql_1.Field(function () { return graphQLType; }, typeGraphQLOptions),
        typeorm_1.Column(args.db)
    ];
    return utils_1.composeMethodDecorators.apply(void 0, factories);
}
exports.CustomField = CustomField;
//# sourceMappingURL=CustomField.js.map