"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var decoratorComposer_1 = require("./decoratorComposer");
var classDecoratorMock = jest.fn();
var methodDecoratorMock = jest.fn();
function ComposedClassDecorator() {
    var classDecoratorOne = function classDecoratorOne(target) {
        classDecoratorMock(target, 'classDecoratorOne');
    };
    var classDecoratorTwo = function classDecoratorTwo(target) {
        classDecoratorMock(target, 'classDecoratorTwo');
    };
    var factories = [classDecoratorOne, classDecoratorTwo];
    return decoratorComposer_1.composeClassDecorators.apply(void 0, factories);
}
function ComposedMethodDecorator() {
    var methodDecoratorOne = function (target, // TODO: why can't this be ClassType?
    propertyKey, descriptor) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var value = descriptor.value, get = descriptor.get, set = descriptor.set, descriptorScalarParts = __rest(descriptor, ["value", "get", "set"]);
        methodDecoratorMock('methodDecoratorOne', target.constructor.name, propertyKey, descriptorScalarParts, typeof value);
    };
    var methodDecoratorTwo = function (target, propertyKey, descriptor) {
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        var value = descriptor.value, get = descriptor.get, set = descriptor.set, descriptorScalarParts = __rest(descriptor, ["value", "get", "set"]);
        methodDecoratorMock('methodDecoratorTwo', target.constructor.name, propertyKey, descriptorScalarParts, typeof value);
    };
    var factories = [methodDecoratorOne, methodDecoratorTwo];
    return decoratorComposer_1.composeMethodDecorators.apply(void 0, factories);
}
var TestClass = /** @class */ (function () {
    function TestClass() {
        //
    }
    TestClass.prototype.TestMethod = function () {
        //
    };
    __decorate([
        ComposedMethodDecorator(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], TestClass.prototype, "TestMethod", null);
    TestClass = __decorate([
        ComposedClassDecorator()
        // eslint-disable-next-line
        // @ts-ignore : TODO: shouldn't need this here.  Need to teach vscode how to allow experimental decorators in test files
        ,
        __metadata("design:paramtypes", [])
    ], TestClass);
    return TestClass;
}());
describe('composeMethodDecorators', function () {
    test('calls all decorators properly', function () { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            new TestClass();
            expect(classDecoratorMock).toHaveBeenCalledTimes(2);
            expect(classDecoratorMock).toHaveBeenNthCalledWith(1, TestClass, 'classDecoratorOne');
            expect(classDecoratorMock).toHaveBeenNthCalledWith(2, TestClass, 'classDecoratorTwo');
            return [2 /*return*/];
        });
    }); });
});
describe('composeClassDecorators', function () {
    test('calls all decorators properly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var expectedDescriptors;
        return __generator(this, function (_a) {
            new TestClass();
            expectedDescriptors = { configurable: true, enumerable: true, writable: true };
            expect(methodDecoratorMock).toHaveBeenCalledTimes(2);
            expect(methodDecoratorMock).toHaveBeenNthCalledWith(1, 'methodDecoratorOne', 'TestClass', 'TestMethod', expectedDescriptors, 'function');
            expect(methodDecoratorMock).toHaveBeenNthCalledWith(2, 'methodDecoratorTwo', 'TestClass', 'TestMethod', expectedDescriptors, 'function');
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=decoratorComposer.test.js.map