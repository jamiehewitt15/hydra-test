import { BaseContext, PageInfo, StandardDeleteResponse } from '../../../';
import { DishCreateInput, DishCreateManyArgs, DishOrderByEnum, DishUpdateArgs, DishWhereArgs, DishWhereInput, DishWhereUniqueInput } from '../../generated';
import { KitchenSink } from '../kitchen-sink/kitchen-sink.model';
import { Dish } from './dish.model';
import { DishService } from './dish.service';
export declare class DishEdge {
    node: Dish;
    cursor: string;
}
export declare class DishConnection {
    totalCount: number;
    edges: DishEdge[];
    pageInfo: PageInfo;
}
export declare class ConnectionPageInputOptions {
    first?: number;
    after?: string;
    last?: number;
    before?: string;
}
export declare class DishConnectionWhereArgs extends ConnectionPageInputOptions {
    where?: DishWhereInput;
    orderBy?: DishOrderByEnum;
}
export declare class DishResolver {
    readonly service: DishService;
    constructor(service: DishService);
    kitchenSink(dish: Dish, ctx: BaseContext): Promise<KitchenSink>;
    dishes({ where, orderBy, limit, offset }: DishWhereArgs, fields: string[]): Promise<Dish[]>;
    dishConnection({ where, orderBy, ...pageOptions }: DishConnectionWhereArgs, fields: object): Promise<DishConnection>;
    dish(where: DishWhereUniqueInput): Promise<Dish>;
    createDish(data: DishCreateInput, userId: string): Promise<Dish>;
    updateDish({ data, where }: DishUpdateArgs, userId: string): Promise<Dish>;
    createManyDishs({ data }: DishCreateManyArgs, userId: string): Promise<Dish[]>;
    deleteDish(where: DishWhereUniqueInput, userId: string): Promise<StandardDeleteResponse>;
    successfulTransaction(data: DishCreateInput, ctx: BaseContext): Promise<Dish[]>;
    failedTransaction(data: DishCreateInput, ctx: BaseContext): Promise<Dish[]>;
}
