import { BaseContext, StandardDeleteResponse } from '../../../';
import { KitchenSinkCreateInput, KitchenSinkCreateManyArgs, KitchenSinkUpdateArgs, KitchenSinkWhereArgs, KitchenSinkWhereUniqueInput } from '../../generated';
import { Dish } from '../dish/dish.model';
import { KitchenSink } from './kitchen-sink.model';
import { KitchenSinkService } from './kitchen-sink.service';
export declare class KitchenSinkResolver {
    readonly service: KitchenSinkService;
    constructor(service: KitchenSinkService);
    dishes(kitchenSink: KitchenSink, ctx: BaseContext): Promise<Dish[]>;
    kitchenSinks({ where, orderBy, limit, offset }: KitchenSinkWhereArgs, fields: string[]): Promise<KitchenSink[]>;
    kitchenSink(where: KitchenSinkWhereUniqueInput): Promise<KitchenSink>;
    createKitchenSink(data: KitchenSinkCreateInput, userId: string): Promise<KitchenSink>;
    createManyKitchenSinks({ data }: KitchenSinkCreateManyArgs, userId: string): Promise<KitchenSink[]>;
    updateKitchenSink({ data, where }: KitchenSinkUpdateArgs, userId: string): Promise<KitchenSink>;
    deleteKitchenSink(where: KitchenSinkWhereUniqueInput, userId: string): Promise<StandardDeleteResponse>;
}
